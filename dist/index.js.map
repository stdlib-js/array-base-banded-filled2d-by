{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a filled two-dimensional banded nested array according to a provided callback function.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeInteger} ku - number of super-diagonals\n* @param {NonNegativeInteger} kl - number of sub-diagonals\n* @param {*} fill - fill value for values outside the band\n* @param {Callback} clbk - callback function\n* @param {*} [thisArg] - callback function execution context\n* @returns {Array} filled array\n*\n* @example\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 3, 3 ], 1, 1, 0, clbk );\n* // returns [ [ 0, 1, 0 ], [ 1, 2, 3 ], [ 0, 3, 4 ] ]\n*\n* @example\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 4, 4 ], 1, 1, 0, clbk );\n* // returns [ [ 0, 1, 0, 0 ], [ 1, 2, 3, 0 ], [ 0, 3, 4, 5 ], [ 0, 0, 5, 6 ] ]\n*\n* @example\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 4, 4 ], 2, 1, 0, clbk );\n* // returns [ [ 0, 1, 2, 0 ], [ 1, 2, 3, 4 ], [ 0, 3, 4, 5 ], [ 0, 0, 5, 6 ] ]\n*\n* @example\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 4, 4 ], 0, 2, 0, clbk );\n* // returns [ [ 0, 0, 0, 0 ], [ 1, 2, 0, 0 ], [ 2, 3, 4, 0 ], [ 0, 4, 5, 6 ] ]\n*\n* @example\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 3, 4 ], 1, 1, 0, clbk );\n* // returns [ [ 0, 1, 0, 0 ], [ 1, 2, 3, 0 ], [ 0, 3, 4, 5 ] ]\n*\n* @example\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 4, 3 ], 1, 1, 0, clbk );\n* // returns [ [ 0, 1, 0 ], [ 1, 2, 3 ], [ 0, 3, 4 ], [ 0, 0, 5 ] ]\n*/\nfunction filled2dBy( shape, ku, kl, fill, clbk, thisArg ) {\n\tvar arr;\n\tvar a0;\n\tvar S0;\n\tvar S1;\n\tvar i0;\n\tvar i1;\n\n\tS1 = shape[ 0 ]; // rows\n\tS0 = shape[ 1 ]; // columns\n\n\t// Manually push elements in order to ensure \"fast\" elements...\n\tarr = [];\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\ta0 = [];\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t// Check whether we are within the band...\n\t\t\tif (\n\t\t\t\t( i0 >= i1 && i0 <= i1+ku ) || // super-diagonals\n\t\t\t\t( i0 <= i1 && i1 <= i0+kl )    // sub-diagonals\n\t\t\t) {\n\t\t\t\ta0.push( clbk.call( thisArg, [ i1, i0 ] ) );\n\t\t\t}\n\t\t\t// Otherwise, we are outside the band...\n\t\t\telse {\n\t\t\t\ta0.push( fill );\n\t\t\t}\n\t\t}\n\t\tarr.push( a0 );\n\t}\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = filled2dBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a filled two-dimensional banded nested array according to a provided callback function.\n*\n* @module @stdlib/array-base-banded-filled2d-by\n*\n* @example\n* var filled2dBy = require( '@stdlib/array-base-banded-filled2d-by' );\n*\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 3, 3 ], 1, 1, 0, clbk );\n* // returns [ [ 0, 1, 0 ], [ 1, 2, 3 ], [ 0, 3, 4 ] ]\n*\n* @example\n* var filled2dBy = require( '@stdlib/array-base-banded-filled2d-by' );\n*\n* function clbk( indices ) {\n*     return indices[ 0 ] + indices[ 1 ];\n* }\n*\n* var out = filled2dBy( [ 4, 4 ], 1, 1, 0, clbk );\n* // returns [ [ 0, 1, 0, 0 ], [ 1, 2, 3, 0 ], [ 0, 3, 4, 5 ], [ 0, 0, 5, 6 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAiFA,SAASC,EAAYC,EAAOC,EAAIC,EAAIC,EAAMC,EAAMC,EAAU,CACzD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAOJ,IALAF,EAAKT,EAAO,CAAE,EACdQ,EAAKR,EAAO,CAAE,EAGdM,EAAM,CAAC,EACDK,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAE7B,IADAJ,EAAK,CAAC,EACAG,EAAK,EAAGA,EAAKF,EAAIE,IAGnBA,GAAMC,GAAMD,GAAMC,EAAGV,GACrBS,GAAMC,GAAMA,GAAMD,EAAGR,EAEvBK,EAAG,KAAMH,EAAK,KAAMC,EAAS,CAAEM,EAAID,CAAG,CAAE,CAAE,EAI1CH,EAAG,KAAMJ,CAAK,EAGhBG,EAAI,KAAMC,CAAG,CACd,CACA,OAAOD,CACR,CAKAR,EAAO,QAAUC,ICrEjB,IAAIa,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "filled2dBy", "shape", "ku", "kl", "fill", "clbk", "thisArg", "arr", "a0", "S0", "S1", "i0", "i1", "main"]
}
